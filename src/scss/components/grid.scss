@use 'styles/utils' as ut;
@use 'styles/variables' as vars;

@mixin get-columns {
  @for $size from 0 through vars.$grid-columns {
    @if $size == 0 {
      &_#{$size} {
        display: none;
      }
    } @else {
      &_#{$size} {
        display: grid;
        grid-column: span #{$size};
      }
    }
  }
}

@mixin grid-align-horizontal($align) {
  &_#{$align} {
    justify-self: $align;
  }
}

@mixin grid-align-vertical($align) {
  &_#{$align} {
    align-self: $align;
  }
}

@mixin grid-align($direction) {
  @each $align in vars.$grid-align-list {
    @if $direction == 'x' {
      @include grid-align-horizontal($align);
    } @else {
      @include grid-align-vertical($align);
    }
  }
}

.grid {
  display: grid;
  grid-template-columns: repeat(#{vars.$grid-columns}, 1fr);
  column-gap: vars.$grid-gap;
  row-gap: vars.$grid-gap;

  &_full-width {
    width: 100%;
  }
}

.grid__item {
  @include get-columns;

  &_tablet {
    @include ut.tablet {
      @include get-columns;
    }
  }

  &_desktop {
    @include ut.desktop {
      @include get-columns;
    }
  }

  &_x {
    @include grid-align('x');

    &-tablet {
      @include ut.tablet {
        @include grid-align('x');
      }
    }

    &-desktop {
      @include ut.desktop {
        @include grid-align('x');
      }
    }
  }

  &_y {
    @include grid-align('y');

    &-tablet {
      @include ut.tablet {
        @include grid-align('y');
      }
    }

    &-desktop {
      @include ut.desktop {
        @include grid-align('y');
      }
    }
  }
}
